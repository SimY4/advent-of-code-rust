use std::mem::replace;

pub fn run_program(opcodes: &mut Vec<i32>, input: &mut Vec<i32>) -> Vec<i32> {
    let mut pointer: usize = 0;
    let mut output = Vec::new();
    loop {
        let opcode = opcodes[pointer];
        let (op, m1, m2) = (opcode % 100, opcode / 100 % 10, opcode / 1000 % 10);
        match op {
            1 => {
                if let [x, y, z] = opcodes[pointer + 1..=pointer + 3] {
                    let (xx, yy, zz) = (
                        if m1 == 1 { x } else { opcodes[x as usize] },
                        if m2 == 1 { y } else { opcodes[y as usize] },
                        &mut opcodes[z as usize],
                    );
                    replace(zz, xx + yy);
                }
                pointer = pointer + 4;
            }
            2 => {
                if let [x, y, z] = opcodes[pointer + 1..=pointer + 3] {
                    let (xx, yy, zz) = (
                        if m1 == 1 { x } else { opcodes[x as usize] },
                        if m2 == 1 { y } else { opcodes[y as usize] },
                        &mut opcodes[z as usize],
                    );
                    replace(zz, xx * yy);
                }
                pointer = pointer + 4;
            }
            3 => {
                let x = opcodes[pointer + 1];
                replace(&mut opcodes[x as usize], input.pop().unwrap());
                pointer = pointer + 2;
            }
            4 => {
                let x = opcodes[pointer + 1];
                let xx = if m1 == 1 { x } else { opcodes[x as usize] };
                output.push(xx);
                pointer = pointer + 2;
            }
            5 => {
                if let [x, y] = opcodes[pointer + 1..=pointer + 2] {
                    let (xx, yy) = (
                        if m1 == 1 { x } else { opcodes[x as usize] },
                        if m2 == 1 { y } else { opcodes[y as usize] },
                    );
                    pointer = if xx != 0 { yy as usize } else { pointer + 3 };
                } else {
                    pointer = pointer + 3;
                }
            }
            6 => {
                if let [x, y] = opcodes[pointer + 1..=pointer + 2] {
                    let (xx, yy) = (
                        if m1 == 1 { x } else { opcodes[x as usize] },
                        if m2 == 1 { y } else { opcodes[y as usize] },
                    );
                    pointer = if xx == 0 { yy as usize } else { pointer + 3 };
                } else {
                    pointer = pointer + 3;
                }
            }
            7 => {
                if let [x, y, z] = opcodes[pointer + 1..=pointer + 3] {
                    let (xx, yy, zz) = (
                        if m1 == 1 { x } else { opcodes[x as usize] },
                        if m2 == 1 { y } else { opcodes[y as usize] },
                        &mut opcodes[z as usize],
                    );
                    replace(zz, if xx < yy { 1 } else { 0 });
                }
                pointer = pointer + 4;
            }
            8 => {
                if let [x, y, z] = opcodes[pointer + 1..=pointer + 3] {
                    let (xx, yy, zz) = (
                        if m1 == 1 { x } else { opcodes[x as usize] },
                        if m2 == 1 { y } else { opcodes[y as usize] },
                        &mut opcodes[z as usize],
                    );
                    replace(zz, if xx == yy { 1 } else { 0 });
                }
                pointer = pointer + 4;
            }
            99 => return output,
            _ => unreachable!(),
        }
    }
}

pub fn solve(input: &str) -> Vec<i32> {
    let mut opcodes = input
        .split(',')
        .map(|d| d.parse::<i32>().unwrap())
        .collect::<Vec<i32>>();
    run_program(&mut opcodes, &mut vec![1])
}

pub fn solve2(input: &str) -> Vec<i32> {
    let mut opcodes = input
        .split(',')
        .map(|d| d.parse::<i32>().unwrap())
        .collect::<Vec<i32>>();
    run_program(&mut opcodes, &mut vec![5])
}

pub const INPUT: &str = "3,225,1,225,6,6,1100,1,238,225,104,0,1101,65,73,225,1101,37,7,225,1101,42,58,225,1102,62,44,224,101,-2728,224,224,4,224,102,8,223,223,101,6,224,224,1,223,224,223,1,69,126,224,101,-92,224,224,4,224,1002,223,8,223,101,7,224,224,1,223,224,223,1102,41,84,225,1001,22,92,224,101,-150,224,224,4,224,102,8,223,223,101,3,224,224,1,224,223,223,1101,80,65,225,1101,32,13,224,101,-45,224,224,4,224,102,8,223,223,101,1,224,224,1,224,223,223,1101,21,18,225,1102,5,51,225,2,17,14,224,1001,224,-2701,224,4,224,1002,223,8,223,101,4,224,224,1,223,224,223,101,68,95,224,101,-148,224,224,4,224,1002,223,8,223,101,1,224,224,1,223,224,223,1102,12,22,225,102,58,173,224,1001,224,-696,224,4,224,1002,223,8,223,1001,224,6,224,1,223,224,223,1002,121,62,224,1001,224,-1302,224,4,224,1002,223,8,223,101,4,224,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1008,226,677,224,102,2,223,223,1005,224,329,1001,223,1,223,7,677,226,224,102,2,223,223,1006,224,344,1001,223,1,223,1007,226,677,224,1002,223,2,223,1006,224,359,1001,223,1,223,1007,677,677,224,102,2,223,223,1005,224,374,1001,223,1,223,108,677,677,224,102,2,223,223,1006,224,389,101,1,223,223,8,226,677,224,102,2,223,223,1005,224,404,101,1,223,223,7,226,677,224,1002,223,2,223,1005,224,419,101,1,223,223,8,677,226,224,1002,223,2,223,1005,224,434,101,1,223,223,107,677,677,224,1002,223,2,223,1006,224,449,101,1,223,223,7,677,677,224,1002,223,2,223,1006,224,464,101,1,223,223,1107,226,226,224,102,2,223,223,1006,224,479,1001,223,1,223,1007,226,226,224,102,2,223,223,1006,224,494,101,1,223,223,108,226,677,224,1002,223,2,223,1006,224,509,101,1,223,223,1108,226,677,224,102,2,223,223,1006,224,524,1001,223,1,223,1008,226,226,224,1002,223,2,223,1005,224,539,101,1,223,223,107,226,226,224,102,2,223,223,1006,224,554,101,1,223,223,8,677,677,224,102,2,223,223,1005,224,569,101,1,223,223,107,226,677,224,102,2,223,223,1005,224,584,101,1,223,223,1108,226,226,224,1002,223,2,223,1005,224,599,1001,223,1,223,1008,677,677,224,1002,223,2,223,1005,224,614,101,1,223,223,1107,226,677,224,102,2,223,223,1005,224,629,101,1,223,223,1108,677,226,224,1002,223,2,223,1005,224,644,1001,223,1,223,1107,677,226,224,1002,223,2,223,1006,224,659,1001,223,1,223,108,226,226,224,102,2,223,223,1006,224,674,101,1,223,223,4,223,99,226";
